"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');

/**
* Prefab entity
*
* @class Prefab
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var Prefab = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

Prefab.prototype = Object.create(ListedEntity.prototype);
Prefab.prototype.constructor = Prefab;

/**
* Prefab key
*
* @property KEY
* @type string
* @default "prefab"
*/
Prefab.KEY = "prefab";

/**
* Get the entity's path
*
* @method getPath
*/
Prefab.prototype.getPath = function() {
	return this.root + '/' + Prefab.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
Prefab.prototype.routing = function() {
	var instance = this;

	this.app.get(this.getPath(), function(req, res) {
		var path = "./app" + req.query.path;
		FileManager.List(path, {recursive: true}, function(_error, _files) {
			res.setHeader('content-type', 'text/plain');
			res.statusCode = 500;

			if (_error) {
				res.write(_error);
			} else {
				res.statusCode = 200;
				res.setHeader('content-type', 'application/json');

				var prefabs = new Array();
				for (var i = 0; i < _files.length; i++) {
					var file = _files[i];
					var filepath = path + "/" + file;

					try {
						// get prefab name
						var name = getPrefabName(filepath);

						// add the prefab
						prefabs.push({
							name: name,
							path: file
						});
					}	catch(e) {
						console.error(e);
					}
				};

				var data = JSON.stringify({
					prefabs: prefabs
				})
				res.write(data);
			}
			res.end();
		});
	});
};

function getPrefabName(_filepath) {
	var name = "Prefab";

	var split = _filepath.split("/");
	var file = split[split.length - 1];

	name = file.replace(".json", "");
	
	return name;
}

module.exports = Prefab;