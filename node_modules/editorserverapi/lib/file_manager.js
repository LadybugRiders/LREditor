"use strict";

var fs = require('fs');

/**
* FileManager entity
*
* @class FileManager
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var FileManager = function() {

};

/**
* Read a file on the server
*
* @method Read
* @param {Request} http request
* @param {Response} http response
* @param {function} callback
*/
FileManager.Read = function(_req, _res, _callback) {
	_res.setHeader('content-type', 'text/plain');
	_res.statusCode = 500;

	var name = _req.query.name;
	var path = "./app" + _req.query.path;
	if (name && path) {
		var url = path + '/' + name;
		fs.exists(url, function(exists) {
			if (exists == false) {
				_res.write("file (" + url + ") doesn't exist.");
				_callback(_req, _res);	
			} else {
				fs.readFile(url, function(err, data) {
					if (err) {
						_res.write(JSON.stringify(err));
					} else {
						_res.statusCode = 200;
						_res.setHeader('content-type', 'application/json');
						_res.write(data);
					}
					_callback(_req, _res);
				});
			}
		});
	} else {
		_res.write("name and/or path are empty.");
		_callback(_req, _res);
	}
};

/**
* Create a file on the server
*
* @method Create
* @param {Request} http request
* @param {Response} http response
* @param {function} callback
*/
FileManager.Create = function(_req, _res, _callback) {
	_res.setHeader('content-type', 'text/plain');
	_res.statusCode = 500;

	var name = _req.body.name;
	var path = "./app" + _req.body.path;
	var data = _req.body.data;
	if (name && path && data) {
		fs.exists(path, function(exists) {
			if (exists == false) {
				_res.write("path (" + path + ") doesn't exist.");
				_callback(_req, _res);	
			} else {
				var url = path + '/' + name;
				// archive file then write the new version
				ArchiveFile(url, function() {
					fs.writeFile(url, data, function(err) {
						if (err) {
							_res.write(JSON.stringify(err));
						} else {
							_res.statusCode = 200;
						}
						_callback(_req, _res);
					});
				});
			}
		});
		
	} else {
		_res.write("name and/or path and/or data are empty.");
		_callback(_req, _res);
	}
};

/**
* List a folder on the server
*
* @method List
* @param {string} path
* @param {function} promise
*/
FileManager.List = function(_path, _promise) {
	if (_path) {
		fs.exists(_path, function(exists) {
			if (exists == false) {
				_promise("path " + _path + " not founf");	
			} else {
				// archive file then write the new version
				fs.readdir(_path, function(error, files) {
					_promise(error, files);
				});
			}
		});
	} else {
		_promise("path is empty");
	}
};

function ArchiveFile(_path, _promise) {
	fs.readFile(_path, function(error, data) {
		if (error) {
			_promise(error);
		} else {
			fs.writeFile(_path + ".old", data, function(error) {
				if (error) {
					_promise(error);
				} else {
					_promise(null);
				}
			})
		}
	});
}

module.exports = FileManager;