"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');

/**
* Behaviour entity
*
* @class Behaviour
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var Behaviour = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

Behaviour.prototype = Object.create(ListedEntity.prototype);
Behaviour.prototype.constructor = Behaviour;

/**
* Behaviour key
*
* @property KEY
* @type string
* @default "behaviour"
*/
Behaviour.KEY = "behaviour";

/**
* Behaviour flag name
*
* @property KEY
* @type string
* @default "behaviour"
*/
Behaviour.FLAG_NAME = "//>>LREditor.Behaviour.name:";

/**
* Get the entity's path
*
* @method getPath
*/
Behaviour.prototype.getPath = function() {
	return this.root + '/' + Behaviour.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
Behaviour.prototype.routing = function() {
	var instance = this;

	this.app.get(this.getPath(), function(req, res) {
		var path = "./app" + req.query.path;
		FileManager.List(path, function(_error, _files) {
			res.setHeader('content-type', 'text/plain');
			res.statusCode = 500;

			if (_error) {
				res.write(_error);
			} else {
				res.statusCode = 200;
				res.setHeader('content-type', 'application/json');
				console.log(_files);

				var behaviours = new Array();
				for (var i = 0; i < _files.length; i++) {
					var file = _files[i];

					var name = getBehaviourName(path, file);

					behaviours.push({
						name: name,
						path: file
					});
				};

				var data = JSON.stringify({
					behaviours: behaviours
				})
				res.write(data);
			}
			res.end();
		});
	});
};

function getBehaviourName(_folder, _file) {
	var name = "Behaviour";
	try {
		var data = fs.readFileSync(_folder + "/" + _file, {encoding: "utf8"});
		var lines = data.split("\n");

		var i=0;
		var found = false;
		while (i<lines.length && found == false) {
			var line = lines[i];
			line = line.replace(/ /g, '');
			console.log(line);

			var index = line.indexOf(Behaviour.FLAG_NAME);
			if (index > -1) {
				name = line.split(Behaviour.FLAG_NAME)[1];
				found = true;
			}

			i++;
		}
	} catch(e) {
		console.error(e);
	}
	
	return name;
}

module.exports = Behaviour;