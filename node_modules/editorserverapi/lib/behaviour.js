"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');

/**
* Behaviour entity
*
* @class Behaviour
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var Behaviour = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

Behaviour.prototype = Object.create(ListedEntity.prototype);
Behaviour.prototype.constructor = Behaviour;

/**
* Behaviour key
*
* @property KEY
* @type string
* @default "behaviour"
*/
Behaviour.KEY = "behaviour";

/**
* Behaviour flag name
*
* @property FLAG_NAME
* @type string
* @default "//>>LREditor.Behaviour.name:"
*/
Behaviour.FLAG_NAME = "//>>LREditor.Behaviour.name:";

/**
* Behaviour flag params
*
* @property FLAG_PARAMS
* @type string
* @default "//>>LREditor.Behaviour.params:"
*/
Behaviour.FLAG_PARAMS = "//>>LREditor.Behaviour.params:";

/**
* Get the entity's path
*
* @method getPath
*/
Behaviour.prototype.getPath = function() {
	return this.root + '/' + Behaviour.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
Behaviour.prototype.routing = function() {
	var instance = this;

	this.app.get(this.getPath(), function(req, res) {
		var path = "./app" + req.query.path;
		FileManager.List(path, {recursive: true}, function(_error, _files) {
			res.setHeader('content-type', 'text/plain');
			res.statusCode = 500;

			if (_error) {
				res.write(_error);
			} else {
				res.statusCode = 200;
				res.setHeader('content-type', 'application/json');

				var behaviours = new Array();
				for (var i = 0; i < _files.length; i++) {
					var file = _files[i];
					var filepath = path + "/" + file;

					try {
						// read behaviour file
						var data = fs.readFileSync(filepath, {encoding: "utf8"});
						
						// get behaviour name
						var name = getBehaviourInfos(data, Behaviour.FLAG_NAME);
						if (name == null) name = "Behaviour";
						
						// get behaviour params
						var params = getBehaviourInfos(data, Behaviour.FLAG_PARAMS);
						if (params == null) {
							params = {};
						} else {
							params = JSON.parse(params);
						}

						// add the behaviour
						behaviours.push({
							name: name,
							params: params,
							path: file
						});
					}	catch(e) {
						console.error(e);
					}
				};

				var data = JSON.stringify({
					behaviours: behaviours
				})
				res.write(data);
			}
			res.end();
		});
	});
};

function getBehaviourInfos(_data, _flag) {
	var infos = null;
	var clean = _data.replace(/\r/g,"");

	// split lines
	var lines = clean.split("\n");
	var i=0;
	var found = false;
	// found the line with the right key
	while (i<lines.length && found == false) {
		var line = lines[i];
		line = line.replace(/ /g, '');

		var index = line.indexOf(_flag);
		if (index > -1) {
			infos = line.split(_flag)[1];
			found = true;
		}

		i++;
	}
	
	return infos;
}

module.exports = Behaviour;