"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');

/**
* BitmapFont entity
*
* @class Image
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var BitmapFont = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

BitmapFont.prototype = Object.create(ListedEntity.prototype);
BitmapFont.prototype.constructor = BitmapFont;

/**
* BitmapFont key
*
* @property KEY
* @type string
* @default "font"
*/
BitmapFont.KEY = "bitmapfont";

/**
* BitmapFont extentions
*
* @property EXTENTIONS
* @type string
* @default []
*/
BitmapFont.EXTENTIONS = [
	".png", ".PNG", ".tga", ".jpg", ".JPG", ".jpeg", ".JPEG", ".gif", ".GIF"
];

/**
* Get the entity's path
*
* @method getPath
*/
BitmapFont.prototype.getPath = function() {
	return this.root + '/' + BitmapFont.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
BitmapFont.prototype.routing = function() {
	var instance = this;

	this.app.get(this.getPath(), function(req, res) {
		var path = "./app" + req.query.path;
		FileManager.List(path, {recursive: true}, function(_error, _files) {
			res.setHeader('content-type', 'text/plain');
			res.statusCode = 500;

			if (_error) {
				res.write(_error);
			} else {
				res.statusCode = 200;
				res.setHeader('content-type', 'application/json');

					console.log(_files);
				var fonts = new Array();
				for (var i = 0; i < _files.length; i++) {
					var file = _files[i];
					if( ! isValid(file))
						continue;
					try {
						// get font name
						var name = getBitmapFontName(file);

						var fontObject = {
							name: name,
							path: file
						};

						addBitmapFontData(fontObject,_files);

						// add the image
						fonts.push(fontObject);
					}	catch(e) {
						console.error(e);
					}
				};

				var data = JSON.stringify({
					fonts: fonts
				})
				res.write(data);
			}
			res.end();
		});
	});
};

function getBitmapFontName(_file) {
	var name = "BitmapFont";

	var noSlash = _file.replace(/\//g, "-");
	if (noSlash[0] == "-") {
		noSlash = noSlash.substr(1);
	}

	var i = 0;
	var found = false;
	while (i<BitmapFont.EXTENTIONS.length && found == false) {
		var ext = BitmapFont.EXTENTIONS[i];

		if (noSlash.indexOf(ext) > -1) {
			name = noSlash.replace(ext, "");
			found = true;
		}

		i++;
	}
	
	return name;
}

function addBitmapFontData( _fontObject, _files ){
	var jsonName = _fontObject.name + ".json";
	var xmlName = _fontObject.name + ".xml";
	var fileName = null;
	console.log(jsonName);
	for(var i=0; i < _files.length; i++){
		fileName = _files[i];
		if( fileName.indexOf(jsonName) >= 0){
			_fontObject.pathJson = fileName;
		}else if( fileName.indexOf(xmlName) >= 0 ){
			_fontObject.pathData = fileName;
		}
	}
}

function isValid(_file){
	for( var i=0; i < BitmapFont.EXTENTIONS.length; i++){
		if( _file.indexOf(BitmapFont.EXTENTIONS[i]) >= 0)
			return true;
	}
	return false;
}

module.exports = BitmapFont;