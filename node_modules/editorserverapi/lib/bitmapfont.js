"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');
var path = require('path');

/**
* BitmapFont entity
*
* @class Image
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var BitmapFont = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

BitmapFont.prototype = Object.create(ListedEntity.prototype);
BitmapFont.prototype.constructor = BitmapFont;

/**
* BitmapFont key
*
* @property KEY
* @type string
* @default "font"
*/
BitmapFont.KEY = "bitmapfont";

/**
* Allowed bitmapFont extentions
*
* @property EXTENTIONS
* @type string
* @default []
*/
BitmapFont.EXTENTIONS_FILTER = /.(png|PNG|jpg|JPG|jpeg|JPEG|gif|GIF)/i;

/**
* Get the entity's path
*
* @method getPath
*/
BitmapFont.prototype.getPath = function() {
	return this.root + '/' + BitmapFont.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
BitmapFont.prototype.routing = function() {
	var instance = this;

	this.app.get(this.getPath(), function(req, res) {
		var filepath = "./app" + req.query.path;
		FileManager.List(filepath, {recursive: true}, function(_error, _files) {
			res.setHeader('content-type', 'text/plain');
			res.statusCode = 500;

			if (_error) {
				res.write(_error);
			} else {
				res.statusCode = 200;
				res.setHeader('content-type', 'application/json');

				var fonts = new Array();
				for (var i = 0; i < _files.length; i++) {
					var file = _files[i];

					// get file extension
					var extension = path.extname(file);

					// if the extenstion is allowed
					if (BitmapFont.EXTENTIONS_FILTER.test(extension)) {
						try {
							var fontObject = {
								name: path.basename(file, extension),
								path: file
							};

							addBitmapFontData(fontObject, _files);

							// add the image
							fonts.push(fontObject);
						}	catch(e) {
							console.error(e);
						}
					}
				};

				var data = JSON.stringify({
					fonts: fonts
				})
				res.write(data);
			}
			res.end();
		});
	});
};

function addBitmapFontData( _fontObject, _files ){
	var jsonName = _fontObject.name + ".json";
	var xmlName = _fontObject.name + ".xml";
	var fileName = null;
	for(var i=0; i < _files.length; i++){
		fileName = _files[i];
		if( fileName.indexOf(jsonName) >= 0){
			_fontObject.pathJson = fileName;
		}else if( fileName.indexOf(xmlName) >= 0 ){
			_fontObject.pathData = fileName;
		}
	}
}

module.exports = BitmapFont;