"use strict";

var fs = require('fs');

/**
* Level entity
*
* @class Level
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var Level = function(_root, _app) {
	/**
	* Root path
	*
	* @property root
	* @type string
	* @default "/editorserverapi/v0"
	*/
	this.root = "/editorserverapi/v0";
	if (typeof _root === "string") {this.root = _root};

	/**
	* Express application
	*
	* @property app
	* @type Express
	* @default null
	*/
	this.app = null;
	if (typeof _app === "function") {this.app = _app};
};

/**
* Level key
*
* @property KEY
* @type string
* @default "level"
*/
Level.KEY = "level";

/**
* Routes the entity
*
* @method routing
*/
Level.prototype.routing = function() {
	var instance = this;

	this.app.get(this.root + '/' + Level.KEY, function(req, res) {
		instance.read(req, res);
	});

	this.app.post(this.root + '/' + Level.KEY, function(req, res) {
		instance.create(req, res);
	});
};

/**
* read a level on the server
*
* @method read
* @param {Request} http request
* @param {Response} http response
*/
Level.prototype.read = function(_req, _res) {
	_res.setHeader('content-type', 'text/plain');
	_res.statusCode = 500;

	var name = _req.query.name;
	var path = _req.query.path;
	if (name && path) {
		var url = path + '/' + name + ".json";
		fs.exists(url, function(exists) {
			if (exists == false) {
				_res.write("file (" + url + ") doesn't exist.");
				_res.end();	
			} else {
				fs.readFile(url, function(err, data) {
					if (err) {
						_res.write(JSON.stringify(err));
					} else {
						_res.statusCode = 200;
						_res.setHeader('content-type', 'application/json');
						_res.write(data);
					}
					_res.end();
				});
			}
		});
	} else {
		_res.write("name and/or path are empty.");
		_res.end();
	}
};

/**
* Create a level on the server
*
* @method create
* @param {Request} http request
* @param {Response} http response
*/
Level.prototype.create = function(_req, _res) {
	_res.setHeader('content-type', 'text/plain');
	_res.statusCode = 500;

	var name = _req.body.name;
	var path = _req.body.path;
	var data = _req.body.data;
	if (name && path && data) {
		fs.exists(path, function(exists) {
			if (exists == false) {
				_res.write("path (" + path + ") doesn't exist.");
				_res.end();	
			} else {
				var url = path + '/' + name + ".json";
				// archive file then write the new version
				ArchiveFile(url, function() {
					fs.writeFile(url, data, function(err) {
						if (err) {
							_res.write(JSON.stringify(err));
						} else {
							_res.statusCode = 200;
						}
						_res.end();
					});
				});
			}
		});
		
	} else {
		_res.write("name and/or path and/or data are empty.");
		_res.end();
	}
};

function ArchiveFile(_path, _promise) {
	fs.readFile(_path, function(error, data) {
		if (error) {
			_promise(error);
		} else {
			fs.writeFile(_path + ".old", data, function(error) {
				if (error) {
					_promise(error);
				} else {
					_promise(null);
				}
			})
		}
	});
}

module.exports = Level;