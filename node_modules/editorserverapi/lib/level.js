"use strict";

var ListedEntity = require('./listed_entity');
var FileManager = require('./file_manager');
var fs = require('fs');
var path = require('path');
var util = require('util');
var multiparty = require('multiparty');

/**
* Level entity
*
* @class Level
* @constructor
* @param {string} root path
* @param {Express} express application
*/
var Level = function(_root, _app) {
	ListedEntity.call(this, _root, _app);
};

Level.prototype = Object.create(ListedEntity.prototype);
Level.prototype.constructor = Level;

/**
* Level key
*
* @property KEY
* @type string
* @default "level"
*/
Level.KEY = "level";

/**
* Allowed level extentions
*
* @property EXTENTIONS_FILTER
* @type regex
*/
Level.EXTENTIONS_FILTER = /.(json)/i;

/**
* Get the entity's path
*
* @method getPath
*/
Level.prototype.getPath = function() {
	return this.root + '/' + Level.KEY;
};

/**
* Routes the entity
*
* @method routing
*/
Level.prototype.routing = function() {
    var instance = this;

    var instance = this;

    this.app.get(this.getPath(), function(req, res) {
        var filepath = "./app" + req.query.path;
        FileManager.List(filepath, {recursive: true}, function(_error, _files) {
            res.setHeader('content-type', 'text/plain');
            res.statusCode = 500;

            if (_error) {
                res.write(_error);
            } else {
                res.statusCode = 200;
                res.setHeader('content-type', 'application/json');

                var levels = new Array();
                for (var i = 0; i < _files.length; i++) {
                    var file = _files[i];

                    try {
                        // get file extension
                        var extension = path.extname(file);

                        // if the extenstion is allowed
                        if (Level.EXTENTIONS_FILTER.test(extension)) {
                            // add the audio
                            levels.push({
                                name: path.basename(file, extension),
                                path: file
                            });
                        }
                    }   catch(e) {
                        console.error(e);
                    }
                };

                var data = JSON.stringify({
                    levels: levels
                })
                res.write(data);
            }
            res.end();
        });
    });

    this.app.get(this.getPath() + "/:name", function(req, res) {
        var path = "./app" + req.query.path;
        var name = req.params.name + ".json";
        FileManager.Read2(path, name, function(error, data) {
            if (error) {
                res.setHeader('content-type', 'text/plain');
                res.statusCode = 500;
                res.write(error);
            } else {
                res.statusCode = 200;
                res.setHeader('content-type', 'application/json');
                res.write(data);
            }
            res.end();
        });
    });

    this.app.post(this.getPath(), function(req, res) {
        var form = new multiparty.Form();

        form.on('field', function(name, value) {
            if (req.body === null) {
                req.body = new Object();
            }

            // for each field, fill the body to match FileManager.Create expectations
            req.body[name] = value;
        });

        form.on('error', function(error) {
            console.error(error);
            res.writeHead(500, {'content-type': 'text/plain'});
            res.end("Error during level export request: " + error);
        });

        form.on('close', function() {
            // if no error occured, the file can be created
            FileManager.Create(req, res, function(_req, _res) {
                _res.end();
            });
        });

        // once the events are set, we can parse the formdata
        form.parse(req);
    });
};

module.exports = Level;